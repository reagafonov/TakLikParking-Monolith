// <auto-generated />
using System;
using Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240419174910_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarEntityUserDataEntity", b =>
                {
                    b.Property<Guid>("CarsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegistrationDataId")
                        .HasColumnType("uuid");

                    b.HasKey("CarsId", "RegistrationDataId");

                    b.HasIndex("RegistrationDataId");

                    b.ToTable("CarEntityUserDataEntity");
                });

            modelBuilder.Entity("Infrastructure.EntityFramework.Models.CarEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Infrastructure.EntityFramework.Models.MessageOptionsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CarEntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<int>("NotifyOptions")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarEntityId");

                    b.ToTable("MessageOptionsEntity");
                });

            modelBuilder.Entity("Infrastructure.EntityFramework.Models.UserDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("TelegramNick")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserDatas");
                });

            modelBuilder.Entity("CarEntityUserDataEntity", b =>
                {
                    b.HasOne("Infrastructure.EntityFramework.Models.CarEntity", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Infrastructure.EntityFramework.Models.UserDataEntity", null)
                        .WithMany()
                        .HasForeignKey("RegistrationDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.EntityFramework.Models.MessageOptionsEntity", b =>
                {
                    b.HasOne("Infrastructure.EntityFramework.Models.CarEntity", "CarEntity")
                        .WithMany("MessageOptions")
                        .HasForeignKey("CarEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarEntity");
                });

            modelBuilder.Entity("Infrastructure.EntityFramework.Models.CarEntity", b =>
                {
                    b.Navigation("MessageOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
